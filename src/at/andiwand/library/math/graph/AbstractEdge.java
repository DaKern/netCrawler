package at.andiwand.library.math.graph;

import java.util.Set;


/**
 * 
 * An abstract implementation of the <code>Edge</code> interface. This class
 * implements simple methods to make it easier for extended classes to implement
 * an <code>Edge</code>.
 * 
 * @author Andreas Stefl
 * 
 * @param <V> the type of the vertices.
 * 
 */
public abstract class AbstractEdge<V> implements Edge<V> {
	
	/**
	 * Returns a string that represents the edge. <br>
	 * This string is simply created by
	 * <code>getConnectedVertices().toString()</code>.
	 * 
	 * @return a string that represents the edge.
	 */
	@Override
	public String toString() {
		Set<V> connectedVertices = getConnectedVertices();
		
		return connectedVertices.toString();
	}
	
	/**
	 * Returns <code>true</code> if the given object is equal to the edge. <br>
	 * Simply the connected vertices of the both edges are compared.
	 * 
	 * @param obj the object to compare.
	 * @return <code>true</code> if the given object is equal to the edge.
	 */
	@Override
	public boolean equals(Object obj) {
		if (obj == null) return false;
		if (obj == this) return true;
		
		if (!(obj instanceof AbstractEdge<?>)) return false;
		AbstractEdge<?> edge = (AbstractEdge<?>) obj;
		
		Set<?> connectedVerticesA = getConnectedVertices();
		Set<?> connectedVerticesB = edge.getConnectedVertices();
		
		return connectedVerticesA.equals(connectedVerticesB);
	}
	
	/**
	 * Returns the hash code of the edge. <br>
	 * The hash code is generated by the set of the connected vertices with
	 * <code>getConnectedVertices().hashCode()</code>.
	 * 
	 * @return the hash code of the edge.
	 */
	@Override
	public int hashCode() {
		Set<V> connectedVertices = getConnectedVertices();
		
		return connectedVertices.hashCode();
	}
	
	
	/**
	 * Returns the count of the connected vertices. <br>
	 * This method calls simply <code>getConnectedVertices().size()</code>. <br>
	 * If the size is directly known by a subclass, this method should be
	 * overwritten to increase the performance.
	 * 
	 * @return the count of the connected vertices.
	 */
	@Override
	public int getVertexCount() {
		Set<V> connectedVertices = getConnectedVertices();
		
		return connectedVertices.size();
	}
	
}